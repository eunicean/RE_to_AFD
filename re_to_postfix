def prec(c):
    precedence = {'|': 0, '^': 3, '*': 2, '/': 2, '+': 1, '-': 1}
    return precedence.get(c, -1)

def to_postfix(regrex):
    stack = []
    result = []

    for char in regrex:
        if char.isalnum():  #letra o n√∫mero
            result.append( char )
        elif char == '(':
            stack.append( char )
        elif char == ')':
            while stack and stack[-1] != '(':
                result.append(stack.pop())
            if stack:  # Evita error si no hay '('
                stack.pop()
        else:  # si es un operador
            while stack and prec( char ) <= prec(stack[-1]) and stack[-1] != '(':
                result.append(stack.pop())
            stack.append( char )

    while stack:
        if stack[-1] == '(': 
            stack.pop()
        else:
            result.append(stack.pop())

    return ''.join(result)

re = "(a*|b*)c"
print("Regular regrex: ", re)
print("Postfix ", to_postfix(re))

fixedlines = []
for line in open("regular_expressions.txt"):
    fixedlines.append(line.replace(" ", "").replace("\n", ""))

for line in fixedlines:
    print("-----------------------------\nRegular Expresion:", line)
    print(to_postfix(line))