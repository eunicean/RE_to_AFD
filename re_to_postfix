def prec(c):
    precedence = {'|': 0, '^': 3, '*': 3, '+': 3, '?': 3, '/': 2, '-': 1}  # '?' con misma prioridad que '*' y '+'
    return precedence.get(c, -1)

def to_postfix(regrex):
    stack = []
    result = []

    for char in regrex:
        if char.isalnum():  # letra o número
            result.append(char)
        elif char == '(':
            stack.append(char)
        elif char == ')':
            while stack and stack[-1] != '(':
                result.append(stack.pop())
            if stack:
                stack.pop()
        elif char == '?':  # Manejo especial para '?'
            result.append('ε')  # Agregar epsilon explícito
            result.append('|')  # Representa la opción de 0 o 1 ocurrencia
        else:  # si es un operador
            while stack and prec(char) <= prec(stack[-1]) and stack[-1] != '(':
                result.append(stack.pop())
            stack.append(char)

    while stack:
        if stack[-1] == '(':
            stack.pop()
        else:
            result.append(stack.pop())

    return ''.join(result)

fixedlines = []
for line in open("regular_expressions.txt"):
    fixedlines.append(line.replace(" ", "").replace("\n", ""))

for line in fixedlines:
    print("-----------------------------\nRegular Expresion:", line)
    print(to_postfix(line))